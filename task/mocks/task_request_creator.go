// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// TaskRequestCreator is an autogenerated mock type for the TaskRequestCreator type
type TaskRequestCreator struct {
	mock.Mock
}

type TaskRequestCreator_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskRequestCreator) EXPECT() *TaskRequestCreator_Expecter {
	return &TaskRequestCreator_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields: apiKey, taskName
func (_m *TaskRequestCreator) Authenticate(apiKey string, taskName string) (*http.Request, error) {
	ret := _m.Called(apiKey, taskName)

	var r0 *http.Request
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*http.Request, error)); ok {
		return rf(apiKey, taskName)
	}
	if rf, ok := ret.Get(0).(func(string, string) *http.Request); ok {
		r0 = rf(apiKey, taskName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(apiKey, taskName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskRequestCreator_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type TaskRequestCreator_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - apiKey string
//   - taskName string
func (_e *TaskRequestCreator_Expecter) Authenticate(apiKey interface{}, taskName interface{}) *TaskRequestCreator_Authenticate_Call {
	return &TaskRequestCreator_Authenticate_Call{Call: _e.mock.On("Authenticate", apiKey, taskName)}
}

func (_c *TaskRequestCreator_Authenticate_Call) Run(run func(apiKey string, taskName string)) *TaskRequestCreator_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *TaskRequestCreator_Authenticate_Call) Return(_a0 *http.Request, _a1 error) *TaskRequestCreator_Authenticate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskRequestCreator_Authenticate_Call) RunAndReturn(run func(string, string) (*http.Request, error)) *TaskRequestCreator_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// Task provides a mock function with given fields: token
func (_m *TaskRequestCreator) Task(token string) (*http.Request, error) {
	ret := _m.Called(token)

	var r0 *http.Request
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*http.Request, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *http.Request); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskRequestCreator_Task_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Task'
type TaskRequestCreator_Task_Call struct {
	*mock.Call
}

// Task is a helper method to define mock.On call
//   - token string
func (_e *TaskRequestCreator_Expecter) Task(token interface{}) *TaskRequestCreator_Task_Call {
	return &TaskRequestCreator_Task_Call{Call: _e.mock.On("Task", token)}
}

func (_c *TaskRequestCreator_Task_Call) Run(run func(token string)) *TaskRequestCreator_Task_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *TaskRequestCreator_Task_Call) Return(_a0 *http.Request, _a1 error) *TaskRequestCreator_Task_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskRequestCreator_Task_Call) RunAndReturn(run func(string) (*http.Request, error)) *TaskRequestCreator_Task_Call {
	_c.Call.Return(run)
	return _c
}

// NewTaskRequestCreator creates a new instance of TaskRequestCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskRequestCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskRequestCreator {
	mock := &TaskRequestCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
