// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// AnswerRequestCreator is an autogenerated mock type for the AnswerRequestCreator type
type AnswerRequestCreator struct {
	mock.Mock
}

type AnswerRequestCreator_Expecter struct {
	mock *mock.Mock
}

func (_m *AnswerRequestCreator) EXPECT() *AnswerRequestCreator_Expecter {
	return &AnswerRequestCreator_Expecter{mock: &_m.Mock}
}

// Answer provides a mock function with given fields: token, answerStr
func (_m *AnswerRequestCreator) Answer(token string, answerStr string) (*http.Request, error) {
	ret := _m.Called(token, answerStr)

	var r0 *http.Request
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*http.Request, error)); ok {
		return rf(token, answerStr)
	}
	if rf, ok := ret.Get(0).(func(string, string) *http.Request); ok {
		r0 = rf(token, answerStr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(token, answerStr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AnswerRequestCreator_Answer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Answer'
type AnswerRequestCreator_Answer_Call struct {
	*mock.Call
}

// Answer is a helper method to define mock.On call
//   - token string
//   - answerStr string
func (_e *AnswerRequestCreator_Expecter) Answer(token interface{}, answerStr interface{}) *AnswerRequestCreator_Answer_Call {
	return &AnswerRequestCreator_Answer_Call{Call: _e.mock.On("Answer", token, answerStr)}
}

func (_c *AnswerRequestCreator_Answer_Call) Run(run func(token string, answerStr string)) *AnswerRequestCreator_Answer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *AnswerRequestCreator_Answer_Call) Return(_a0 *http.Request, _a1 error) *AnswerRequestCreator_Answer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AnswerRequestCreator_Answer_Call) RunAndReturn(run func(string, string) (*http.Request, error)) *AnswerRequestCreator_Answer_Call {
	_c.Call.Return(run)
	return _c
}

// NewAnswerRequestCreator creates a new instance of AnswerRequestCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAnswerRequestCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *AnswerRequestCreator {
	mock := &AnswerRequestCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
